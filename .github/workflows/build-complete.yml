name: Build Mull using FDroidServer

on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version code to build (leave default for official latest: Mull 133.0.3)'
        required: false
        default: 'auto'
        type: string
      architecture:
        description: 'Target architecture'
        required: false
        default: 'arm64'
        type: choice
        options:
        - arm64
        - armv7
        - x86

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6小时超时

    steps:
    - name: Maximize build space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Checkout Mull-Fenix
      uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3 python3-pip python3-venv \
          git mercurial subversion \
          openjdk-17-jdk-headless \
          build-essential \
          rsync \
          unzip

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install fdroidserver
      run: |
        python3 -m venv fdroid-env
        source fdroid-env/bin/activate
        pip install fdroidserver
        
        # 验证安装
        fdroid --version

    - name: Setup fdroid environment
      run: |
        source fdroid-env/bin/activate
        
        # 创建 fdroid 工作目录
        mkdir -p fdroid-build
        cd fdroid-build
        
        echo "=== Initializing fdroid repository ==="
        fdroid init --verbose
        
        # 我们不需要克隆 fdroiddata，因为仓库已经包含了配置
        echo "=== Using configuration from Mull-Fenix repository ==="
        echo "Official config file path: ../Mull-Fenix/-fdroiddata/metadata/us.spotco.fennec_dos.yml"

    - name: Get version information from config
      id: version_info
      run: |
        echo "=== Extracting version info from official config ==="
        
        # 从官方配置文件中提取最新版本信息
        if [ -f "Mull-Fenix/-fdroiddata/metadata/us.spotco.fennec_dos.yml" ]; then
          CURRENT_VERSION=$(grep "CurrentVersion:" Mull-Fenix/-fdroiddata/metadata/us.spotco.fennec_dos.yml | cut -d"'" -f2)
          CURRENT_VERSION_CODE=$(grep "CurrentVersionCode:" Mull-Fenix/-fdroiddata/metadata/us.spotco.fennec_dos.yml | awk '{print $2}')
          
          echo "Official current version: $CURRENT_VERSION"
          echo "Official current version code: $CURRENT_VERSION_CODE"
          echo "User requested version code: ${{ github.event.inputs.version_code }}"
          
          # 如果用户没有指定版本号，使用官方配置中的最新版本
          if [ "${{ github.event.inputs.version_code }}" = "auto" ]; then
            VERSION_TO_BUILD="$CURRENT_VERSION_CODE"
            echo "Using official version code: $VERSION_TO_BUILD"
          else
            VERSION_TO_BUILD="${{ github.event.inputs.version_code }}"
            echo "Using user specified version code: $VERSION_TO_BUILD"
      - name: Prepare Mull build configuration
      run: |
          
          echo "version_to_build=$VERSION_TO_BUILD" >> $GITHUB_OUTPUT
          echo "official_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Official config file not found!"
          exit 1
        fi
      run: |
        source fdroid-env/bin/activate
        cd fdroid-build
        
        echo "=== Using official Mull configuration from repository ==="
        
        # 直接复制仓库中的官方配置文件
        cp ../Mull-Fenix/-fdroiddata/metadata/us.spotco.fennec_dos.yml metadata/
        
        echo "=== Official Mull configuration content ==="
        cat metadata/us.spotco.fennec_dos.yml
        
        # 检查是否还有其他相关配置文件
        echo "=== Checking for additional fdroiddata files ==="
        find ../Mull-Fenix/-fdroiddata/ -type f | head -20
        
        # 复制所有 fdroiddata 内容
        if [ -d "../Mull-Fenix/-fdroiddata/" ]; then
          echo "=== Copying all fdroiddata configuration ==="
          cp -r ../Mull-Fenix/-fdroiddata/* ./ 2>/dev/null || true
          
          # 显示复制的结构
          echo "=== Copied fdroiddata structure ==="
          find . -name "*spotco*" -o -name "*fennec*" -o -name "*mull*" | head -10
        fi

    - name: Build Mull APK
      run: |
        source fdroid-env/bin/activate
        cd fdroid-build
        
        echo "=== Starting fdroid build process ==="
        echo "Using official Mull 133.0.3 configuration"
        echo "Version code to build: ${{ steps.version_info.outputs.version_to_build }}"
        echo "Official version: ${{ steps.version_info.outputs.official_version }}"
        echo "Architecture: ${{ github.event.inputs.architecture }}"
        
        # 构建 Mull（使用从配置文件提取的版本号）
        fdroid build -v -l us.spotco.fennec_dos:${{ steps.version_info.outputs.version_to_build }} || {
          echo "=== Build failed, checking logs ==="
          find . -name "*.log" -newer metadata -exec echo "=== {} ===" \; -exec tail -100 {} \;
          
          echo "=== Checking tmp build directory ==="
          find tmp -name "*mull*" -o -name "*fennec*" -o -name "*.apk" 2>/dev/null | head -10
          
          echo "=== Checking unsigned directory ==="
          find unsigned -name "*.apk" 2>/dev/null | head -10
          
          echo "=== Complete directory structure ==="
          find . -name "*.apk" -o -name "*.jar" 2>/dev/null
          exit 1
        }

    - name: Find and prepare APKs
      id: find_apk
      run: |
        cd fdroid-build
        
        echo "=== Searching for built APKs ==="
        find . -name "*.apk" -type f
        
        APK_PATH=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_PATH" ]; then
          echo "No APK found!"
          exit 1
        fi
        
        echo "Found APK: $APK_PATH"
        
        # 复制 APK 到工作目录
        cp "$APK_PATH" ../mull-${{ github.event.inputs.architecture }}-$(date +%Y%m%d).apk
        echo "apk_name=mull-${{ github.event.inputs.architecture }}-$(date +%Y%m%d).apk" >> $GITHUB_OUTPUT

    - name: Check signing secrets
      id: check_secrets
      run: |
        if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ] && [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && [ -n "${{ secrets.KEY_PASSWORD }}" ] && [ -n "${{ secrets.KEY_ALIAS }}" ]; then
          echo "signing_enabled=true" >> $GITHUB_OUTPUT
        else
          echo "signing_enabled=false" >> $GITHUB_OUTPUT
          echo "Warning: Signing secrets not complete, will skip APK signing"
        fi

    - name: Decode signing keystore
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      run: |
        mkdir -p keystore
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore/keystore.jks

    - name: Sign APK
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      run: |
        APK_NAME="${{ steps.find_apk.outputs.apk_name }}"
        
        # 安装 Android SDK build tools (for zipalign)
        sudo apt-get install -y android-sdk-build-tools
        
        # 对齐APK
        zipalign -v 4 "$APK_NAME" "${APK_NAME%.apk}-aligned.apk"
        
        # 签名APK
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore keystore/keystore.jks \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          "${APK_NAME%.apk}-aligned.apk" "${{ secrets.KEY_ALIAS }}"
        
        # 验证签名
        jarsigner -verify -verbose "${APK_NAME%.apk}-aligned.apk"
        
        mv "${APK_NAME%.apk}-aligned.apk" "${APK_NAME%.apk}-signed.apk"

    - name: Upload unsigned APK
      uses: actions/upload-artifact@v4
      with:
        name: mull-unsigned-${{ github.event.inputs.architecture }}
        path: "*.apk"
        retention-days: 30

    - name: Upload signed APK
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: mull-signed-${{ github.event.inputs.architecture }}
        path: "*-signed.apk"
        retention-days: 90

    - name: Build summary
      run: |
        echo "## Mull Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Build method: fdroidserver (official method)" >> $GITHUB_STEP_SUMMARY
        echo "- Version code: ${{ github.event.inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
        echo "- Architecture: ${{ github.event.inputs.architecture }}" >> $GITHUB_STEP_SUMMARY
        echo "- APK name: ${{ steps.find_apk.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Architecture codes:" >> $GITHUB_STEP_SUMMARY
        echo "- ARMv7: version code ending in 0" >> $GITHUB_STEP_SUMMARY
        echo "- x86: version code ending in 1" >> $GITHUB_STEP_SUMMARY  
        echo "- AArch64: version code ending in 2" >> $GITHUB_STEP_SUMMARY
        ls -la *.apk >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No APK files found" >> $GITHUB_STEP_SUMMARY
