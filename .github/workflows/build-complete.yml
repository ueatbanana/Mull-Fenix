name: Build Mull-Fenix Complete

on:
  workflow_dispatch:
    inputs:
      gecko_version:
        description: 'Gecko ESR version (default: esr115)'
        required: false
        default: 'esr115'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 480  # 8小时超时，构建可能很长

    steps:
    - name: Maximize build space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Checkout Mull-Fenix
      uses: actions/checkout@v4
      with:
        path: mull-fenix

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          curl wget unzip zip git \
          clang cmake ninja-build pkg-config \
          libgtk-3-dev libdbus-glib-1-dev libxt-dev libx11-dev \
          autoconf2.13 python3 python-is-python3 \
          build-essential libc6-dev \
          yasm nasm nodejs npm \
          mercurial

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: aarch64-linux-android

    - name: Install Android SDK and NDK
      run: |
        # 下载并安装 Android SDK
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p /opt/android-sdk/cmdline-tools
        mv cmdline-tools /opt/android-sdk/cmdline-tools/latest
        
        export ANDROID_HOME=/opt/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        
        # 安装必要的 SDK 组件
        yes | sdkmanager --licenses || true
        sdkmanager "platforms;android-33" "build-tools;33.0.2" "platforms;android-21"
        
        # 下载并安装 NDK r25c (与 ESR115 兼容)
        wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        unzip -q android-ndk-r25c-linux.zip
        mv android-ndk-r25c /opt/android-ndk
        
        # 验证安装
        echo "=== Android SDK/NDK verification ==="
        ls -la /opt/android-sdk/
        ls -la /opt/android-ndk/
        
        # 设置环境变量
        echo "ANDROID_HOME=/opt/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=/opt/android-ndk" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=/opt/android-ndk" >> $GITHUB_ENV
        echo "/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-ndk" >> $GITHUB_PATH

    - name: Clone Gecko source
      run: |
        # 推荐版本说明：
        # esr115: 最稳定，Mull 原始支持版本
        # esr128: 较新但仍稳定，有安全更新
        # latest: 最新版本，构建难度高，不推荐
        
        git clone --depth 1 --branch ${{ github.event.inputs.gecko_version }} \
          https://github.com/mozilla/gecko-dev.git gecko-dev
        cd gecko-dev
        echo "Using Firefox version: ${{ github.event.inputs.gecko_version }}"
        git log -1 --oneline

    - name: Apply Mull patches (if any)
      run: |
        cd gecko-dev
        # 如果 mull-fenix 有补丁文件，应用它们
        if [ -d "../mull-fenix/patches" ]; then
          for patch in ../mull-fenix/patches/*.patch; do
            if [ -f "$patch" ]; then
              echo "Applying patch: $patch"
              git apply "$patch" || echo "Patch $patch failed, continuing..."
            fi
          done
        fi

    - name: Create mozconfig
      run: |
        cd gecko-dev
        
        # 确保环境变量正确设置
        export ANDROID_NDK_HOME=/opt/android-ndk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        
        cat > mozconfig << 'EOF'
        # 明确指定 Android 交叉编译
        ac_add_options --target=aarch64-linux-android
        ac_add_options --enable-application=mobile/android
        
        # Android 工具链路径（使用绝对路径）
        ac_add_options --with-android-ndk=/opt/android-ndk
        ac_add_options --with-android-sdk=/opt/android-sdk
        
        # Android 版本设置
        ac_add_options --with-android-min-sdk=21
        ac_add_options --with-android-max-sdk=33
        
        # 构建类型和优化
        ac_add_options --enable-release
        ac_add_options --disable-debug
        ac_add_options --enable-optimize="-O2"
        
        # 禁用不需要的功能以简化构建
        ac_add_options --disable-tests
        ac_add_options --disable-necko-wifi
        ac_add_options --disable-updater
        ac_add_options --disable-crashreporter  
        ac_add_options --disable-maintenance-service
        ac_add_options --disable-webrtc
        ac_add_options --disable-webspeech
        ac_add_options --disable-synth-speechd
        
        # 链接器设置
        ac_add_options --enable-linker=lld
        
        # 并发控制
        mk_add_options MOZ_MAKE_FLAGS="-j2"
        mk_add_options MOZ_PARALLEL_BUILD=2
        
        # 使用默认 branding（避免自定义 branding 问题）
        ac_add_options --with-branding=mobile/android/branding/unofficial
        
        # 禁用官方 branding 检查
        ac_add_options --disable-official-branding
        EOF
        
        echo "=== Generated mozconfig ==="
        cat mozconfig
        
        echo "=== Environment check ==="
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        ls -la /opt/android-ndk/toolchains/ || echo "NDK toolchains not found"

    - name: Setup Mull branding
      run: |
        cd gecko-dev
        # 创建 Mull branding 目录结构
        mkdir -p mobile/android/branding/mull
        
        # 复制并修改品牌文件（如果 mull-fenix 提供了的话）
        if [ -d "../mull-fenix/branding" ]; then
          cp -r ../mull-fenix/branding/* mobile/android/branding/mull/
        else
          # 使用默认的 Firefox branding 作为基础
          cp -r mobile/android/branding/unofficial/* mobile/android/branding/mull/
          # 修改应用名称
          sed -i 's/Fennec/Mull/g' mobile/android/branding/mull/configure.sh
        fi

    - name: Bootstrap build environment
      run: |
        cd gecko-dev
        export MOZBUILD_STATE_PATH=$HOME/.mozbuild
        
        # 检查 mach bootstrap 支持的参数
        echo "Checking mach bootstrap options..."
        python3 ./mach bootstrap --help || true
        
        # 尝试不同的 bootstrap 方式
        echo "Starting bootstrap process..."
        
        # 方法1：尝试使用 --application-choice
        if python3 ./mach bootstrap --application-choice=mobile_android 2>/dev/null; then
          echo "Bootstrap successful with --application-choice"
        else
          echo "Method 1 failed, trying alternative..."
          
          # 方法2：使用 yes 命令自动回答交互提示
          echo "2" | python3 ./mach bootstrap || {
            echo "Method 2 failed, trying manual setup..."
            
            # 方法3：手动安装必要的依赖
            python3 ./mach artifact toolchain --from-build linux64-rust
            python3 ./mach artifact toolchain --from-build linux64-cbindgen
            python3 ./mach artifact toolchain --from-build linux64-nasm
            python3 ./mach artifact toolchain --from-build linux64-node
          }
        fi

    - name: Build APK
      run: |
        cd gecko-dev
        export MOZBUILD_STATE_PATH=$HOME/.mozbuild
        export MOZCONFIG=$PWD/mozconfig
        export ANDROID_NDK_HOME=/opt/android-ndk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export ANDROID_HOME=/opt/android-sdk
        
        echo "=== Environment Setup ==="
        echo "MOZCONFIG: $MOZCONFIG"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        echo "=== Verifying Android toolchain ==="
        if [ ! -d "/opt/android-ndk/toolchains/llvm/prebuilt/linux-x86_64" ]; then
          echo "ERROR: Android NDK toolchain not found!"
          ls -la /opt/android-ndk/
          exit 1
        fi
        
        echo "=== Configure step ==="
        ./mach configure --verbose || {
          echo "=== Configure failed, showing logs ==="
          if [ -f "config.log" ]; then
            echo "--- config.log (last 100 lines) ---"
            tail -100 config.log
          fi
          if [ -f "obj-*/config.log" ]; then
            echo "--- obj-*/config.log (last 100 lines) ---"
            tail -100 obj-*/config.log
          fi
          echo "=== Checking for configure errors ==="
          find . -name "*.log" -exec grep -l "configure.*error\|configure.*failed" {} \;
          exit 1
        }
        
        echo "=== Configuration successful, starting build ==="
        ./mach build -v || {
          echo "=== Build failed, diagnostic information ==="
          echo "--- Recent build logs ---"
          find . -name "*.log" -newer mozconfig -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null | head -200
          
          echo "--- Checking for specific errors ---"
          find . -name "*.log" -exec grep -H -A5 -B5 "error\|Error\|ERROR\|failed\|FAILED" {} \; 2>/dev/null | head -100
          
          echo "--- Build directory structure ---"
          find obj-* -maxdepth 2 -type d 2>/dev/null | head -20
          exit 1
        }
        
        echo "=== Build successful, creating package ==="
        ./mach package || {
          echo "=== Package failed ==="
          find obj-* -name "*.apk" -o -name "*.so" -o -name "*.jar" 2>/dev/null | head -10
          exit 1
        }
        
        echo "=== Build completed successfully ==="
        find obj-* -name "*.apk" -ls

    - name: Find and prepare APK
      id: find_apk
      run: |
        cd gecko-dev
        APK_PATH=$(find obj-* -name "*.apk" -type f | head -n1)
        if [ -z "$APK_PATH" ]; then
          echo "No APK found!"
          exit 1
        fi
        
        echo "Found APK: $APK_PATH"
        
        # 复制到工作目录并重命名
        cp "$APK_PATH" ../mull-fenix-arm64-$(date +%Y%m%d).apk
        echo "apk_name=mull-fenix-arm64-$(date +%Y%m%d).apk" >> $GITHUB_OUTPUT

    - name: Check signing secrets
      id: check_secrets
      run: |
        if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ] && [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && [ -n "${{ secrets.KEY_PASSWORD }}" ] && [ -n "${{ secrets.KEY_ALIAS }}" ]; then
          echo "signing_enabled=true" >> $GITHUB_OUTPUT
        else
          echo "signing_enabled=false" >> $GITHUB_OUTPUT
          echo "Warning: Signing secrets not complete, will skip APK signing"
        fi

    - name: Decode signing keystore
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      run: |
        mkdir -p keystore
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore/keystore.jks

    - name: Sign APK
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      run: |
        APK_NAME="${{ steps.find_apk.outputs.apk_name }}"
        
        # 对齐APK
        /opt/android-sdk/build-tools/33.0.2/zipalign -v 4 "$APK_NAME" "${APK_NAME%.apk}-aligned.apk"
        
        # 签名APK
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore keystore/keystore.jks \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          "${APK_NAME%.apk}-aligned.apk" "${{ secrets.KEY_ALIAS }}"
        
        # 最终签名验证
        jarsigner -verify -verbose "${APK_NAME%.apk}-aligned.apk"
        
        mv "${APK_NAME%.apk}-aligned.apk" "${APK_NAME%.apk}-signed.apk"

    - name: Upload unsigned APK
      uses: actions/upload-artifact@v4
      with:
        name: mull-fenix-unsigned-apk
        path: "*.apk"
        retention-days: 30

    - name: Upload signed APK
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: mull-fenix-signed-apk
        path: "*-signed.apk"
        retention-days: 90

    - name: Build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Gecko version: ${{ github.event.inputs.gecko_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Target: arm64-v8a" >> $GITHUB_STEP_SUMMARY
        echo "- APK name: ${{ steps.find_apk.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
        ls -la *.apk >> $GITHUB_STEP_SUMMARY || echo "No APK files found" >> $GITHUB_STEP_SUMMARY
