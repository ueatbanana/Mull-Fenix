name: Build Mull using FDroidServer

on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version code to build (leave default for official latest: Mull 133.0.3)'
        required: false
        default: 'auto'
        type: string
      architecture:
        description: 'Target architecture'
        required: false
        default: 'arm64'
        type: choice
        options:
        - arm64
        - armv7
        - x86

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
    - name: Maximize build space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Checkout Mull-Fenix
      uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3 python3-pip python3-venv \
          git mercurial subversion \
          openjdk-17-jdk-headless \
          build-essential \
          rsync \
          unzip \
          android-sdk-build-tools-common \
          apksigner

    - name: Install and setup Android SDK
      run: |
        # 下载并安装 Android SDK
        mkdir -p /opt/android-sdk
        cd /opt/android-sdk
        
        # 下载 command line tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        
        # 正确重组目录结构 - 避免移动到自己的子目录
        mkdir -p temp-cmdline-tools
        mv cmdline-tools/* temp-cmdline-tools/
        rm -rf cmdline-tools
        mkdir -p cmdline-tools/latest
        mv temp-cmdline-tools/* cmdline-tools/latest/
        rm -rf temp-cmdline-tools
        
        # 设置环境变量
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        
        # 接受许可证
        yes | sdkmanager --licenses || true
        
        # 安装必要组件
        sdkmanager "platforms;android-33" "build-tools;33.0.2" "platforms;android-21"
        
        # 下载 NDK
        wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        unzip -q android-ndk-r25c-linux.zip
        mv android-ndk-r25c ndk
        
        # 验证安装
        echo "=== Android SDK verification ==="
        ls -la /opt/android-sdk/
        ls -la /opt/android-sdk/build-tools/
        
        # 确保权限正确
        sudo chown -R runner:runner /opt/android-sdk
        
        # 设置全局环境变量
        echo "ANDROID_HOME=/opt/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV
        echo "/opt/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "/opt/android-sdk/build-tools/33.0.2" >> $GITHUB_PATH

    - name: Install fdroidserver
      run: |
        python3 -m venv fdroid-env
        source fdroid-env/bin/activate
        pip install fdroidserver
        fdroid --version

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup fdroid environment
      run: |
        source fdroid-env/bin/activate
        
        # 确保使用全新的目录
        rm -rf fdroid-build
        mkdir -p fdroid-build
        cd fdroid-build
        
        echo "=== Current directory contents before init ==="
        ls -la .
        
        echo "=== Initializing fdroid repository first ==="
        fdroid init --verbose || {
          echo "=== Init failed, detailed debugging ==="
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la .
          echo "Checking for existing fdroid files..."
          find . -name "config.*" -o -name "*.py" -o -name "metadata" -type d 2>/dev/null || true
          echo "Checking parent directory..."
          ls -la ..
          echo "Environment variables:"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "PATH: $PATH"
          echo "Android SDK verification:"
          ls -la /opt/android-sdk/ || echo "SDK not found"
          which apksigner || echo "apksigner not found"
          which java || echo "java not found"
          java -version || echo "java version check failed"
          exit 1
        }
        
        echo "=== Fdroid repository initialized successfully ==="
        
        # 确保 metadata 目录存在
        echo "=== Ensuring metadata directory exists ==="
        mkdir -p metadata
        ls -la metadata/
        
        # 现在修改配置文件
        echo "=== Updating fdroid configuration ==="
        cat > config.yml << 'EOF'
        sdk_path: /opt/android-sdk
        ndk_paths:
          r25c: /opt/android-sdk/ndk
        build_tools: 33.0.2
        keystore: debug.keystore
        repo_keyalias: sova
        keypass: android
        keystorepass: android
        keydname: CN=Birdman, OU=Cell, O=Alcatraz, L=Alcatraz, S=California, C=US
        EOF
        
        echo "=== Updated config file ==="
        cat config.yml
        
        echo "Final directory contents:"
        ls -la .

    - name: Get version information from config
      id: version_info
      run: |
        echo "=== Extracting version info from official config ==="
        
        # 检查配置文件是否存在 (注意目录名以连字符开头)
        if [ ! -f "./-fdroiddata/metadata/us.spotco.fennec_dos.yml" ]; then
          echo "ERROR: Official config file not found!"
          echo "Looking in current directory..."
          find . -name "*.yml" -o -name "*fennec*" -o -name "*spotco*" | head -10
          echo "Looking in parent directory..."
          find .. -name "*.yml" -o -name "*fennec*" -o -name "*spotco*" | head -10
          echo "Complete directory structure:"
          find . -type d | head -20
          
          # 尝试不同的路径
          CONFIG_FILE=""
          for path in "./-fdroiddata/metadata/us.spotco.fennec_dos.yml" "../-fdroiddata/metadata/us.spotco.fennec_dos.yml" "./metadata/us.spotco.fennec_dos.yml"; do
            if [ -f "$path" ]; then
              CONFIG_FILE="$path"
              echo "Found config file at: $path"
              break
            fi
          done
          
          if [ -z "$CONFIG_FILE" ]; then
            echo "Using default version since config not found"
            echo "version_to_build=1330300200" >> $GITHUB_OUTPUT
            echo "official_version=133.0.3" >> $GITHUB_OUTPUT
            exit 0
          fi
        else
          CONFIG_FILE="./-fdroiddata/metadata/us.spotco.fennec_dos.yml"
        fi
        
        echo "Using config file: $CONFIG_FILE"
        cat "$CONFIG_FILE" | head -20
        
        CURRENT_VERSION=$(grep "CurrentVersion:" "$CONFIG_FILE" | cut -d"'" -f2 2>/dev/null || echo "133.0.3")
        CURRENT_VERSION_CODE=$(grep "CurrentVersionCode:" "$CONFIG_FILE" | awk '{print $2}' 2>/dev/null || echo "1330300200")
        
        echo "Official current version: $CURRENT_VERSION"
        echo "Official current version code: $CURRENT_VERSION_CODE"
        echo "User requested version code: ${{ github.event.inputs.version_code }}"
        
        if [ "${{ github.event.inputs.version_code }}" = "auto" ]; then
          VERSION_TO_BUILD="$CURRENT_VERSION_CODE"
          echo "Using official version code: $VERSION_TO_BUILD"
        else
          VERSION_TO_BUILD="${{ github.event.inputs.version_code }}"
          echo "Using user specified version code: $VERSION_TO_BUILD"
        fi
        
        echo "version_to_build=$VERSION_TO_BUILD" >> $GITHUB_OUTPUT
        echo "official_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Prepare Mull build configuration
      run: |
        source fdroid-env/bin/activate
        cd fdroid-build
        
        echo "=== Ensuring metadata directory exists ==="
        mkdir -p metadata
        
        echo "=== Using official Mull configuration from repository ==="
        
        # 尝试从不同位置找到配置文件
        CONFIG_SOURCE=""
        for path in "../-fdroiddata/metadata/us.spotco.fennec_dos.yml" "./-fdroiddata/metadata/us.spotco.fennec_dos.yml"; do
          if [ -f "$path" ]; then
            CONFIG_SOURCE="$path"
            echo "Found config source at: $path"
            break
          fi
        done
        
        if [ -n "$CONFIG_SOURCE" ]; then
          cp "$CONFIG_SOURCE" metadata/us.spotco.fennec_dos.yml
          echo "=== Official Mull configuration content ==="
          cat metadata/us.spotco.fennec_dos.yml
        else
          echo "=== Creating basic Mull configuration ==="
          cat > metadata/us.spotco.fennec_dos.yml << 'EOF'
Categories:
  - Internet
License: MPL-2.0
WebSite: https://divestos.org/pages/browsers#mull
SourceCode: https://codeberg.org/divested-mobile/mull-fenix
IssueTracker: https://codeberg.org/divested-mobile/mull-fenix/issues
Changelog: https://codeberg.org/divested-mobile/mull-fenix/releases

AutoName: Mull
Summary: Privacy oriented web browser
Description: |-
    A privacy oriented and deblobbed web browser based on Mozilla technology.
    
    It enables many features upstreamed by the Tor Browser project using preferences from the arkenfox-user.js project.

RepoType: git
Repo: https://codeberg.org/divested-mobile/mull-fenix.git

Builds:
  - versionName: '133.0.3'
    versionCode: 1330300200
    commit: v133.0.3
    subdir: android-components
    submodules: true
    gradle:
      - yes
    srclibs:
      - rustup@1.27.1
    prebuild: |
      pushd ..
      git submodule update --init --recursive
      popd
    build: |
      export RUST_ANDROID_GRADLE_TARGET_X86_64_LINUX_ANDROID_NDK_ROOT="$ANDROID_NDK"
      export RUST_ANDROID_GRADLE_TARGET_I686_LINUX_ANDROID_NDK_ROOT="$ANDROID_NDK"
      export RUST_ANDROID_GRADLE_TARGET_ARMV7_LINUX_ANDROIDEABI_NDK_ROOT="$ANDROID_NDK"
      export RUST_ANDROID_GRADLE_TARGET_AARCH64_LINUX_ANDROID_NDK_ROOT="$ANDROID_NDK"
      
      $$rustup$$/rustup-init.sh -y
      source ~/.cargo/env
      rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
      
      pushd ..
      ./gradlew assembleFenixNightlyArm64 -x lintVitalFenixNightlyRelease
      popd

AutoUpdateMode: None
UpdateCheckMode: None
CurrentVersion: '133.0.3'
CurrentVersionCode: 1330300200
EOF
        fi
        
        echo "=== Checking for additional fdroiddata files ==="
        find ../ -name "*fdroiddata*" -type d | head -5
        
        # 复制其他必要的文件
        if [ -d "../-fdroiddata/" ]; then
          echo "=== Copying additional fdroiddata configuration ==="
          [ -d "../-fdroiddata/srclibs" ] && cp -r ../-fdroiddata/srclibs . 2>/dev/null || echo "No srclibs found"
          
          echo "=== Final fdroid structure ==="
          find . -name "*spotco*" -o -name "*fennec*" -o -name "*mull*" -o -name "srclibs" | head -10
        fi

    - name: Build Mull APK
      run: |
        source fdroid-env/bin/activate
        cd fdroid-build
        
        echo "=== Starting fdroid build process ==="
        echo "Using official Mull 133.0.3 configuration"
        echo "Version code to build: ${{ steps.version_info.outputs.version_to_build }}"
        echo "Official version: ${{ steps.version_info.outputs.official_version }}"
        echo "Architecture: ${{ github.event.inputs.architecture }}"
        
        # 验证配置文件
        echo "=== Verifying configuration ==="
        ls -la metadata/
        cat metadata/us.spotco.fennec_dos.yml | head -10
        
        fdroid build -v -l us.spotco.fennec_dos:${{ steps.version_info.outputs.version_to_build }} || {
          echo "=== Build failed, checking logs ==="
          find . -name "*.log" -newer metadata -exec echo "=== {} ===" \; -exec tail -100 {} \;
          
          echo "=== Checking tmp build directory ==="
          find tmp -name "*mull*" -o -name "*fennec*" -o -name "*.apk" 2>/dev/null | head -10
          
          echo "=== Checking unsigned directory ==="
          find unsigned -name "*.apk" 2>/dev/null | head -10
          
          echo "=== Complete directory structure ==="
          find . -name "*.apk" -o -name "*.jar" 2>/dev/null
          exit 1
        }

    - name: Find and prepare APKs
      id: find_apk
      run: |
        cd fdroid-build
        
        echo "=== Searching for built APKs ==="
        find . -name "*.apk" -type f
        
        APK_PATH=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_PATH" ]; then
          echo "No APK found!"
          exit 1
        fi
        
        echo "Found APK: $APK_PATH"
        cp "$APK_PATH" ../mull-${{ github.event.inputs.architecture }}-$(date +%Y%m%d).apk
        echo "apk_name=mull-${{ github.event.inputs.architecture }}-$(date +%Y%m%d).apk" >> $GITHUB_OUTPUT

    - name: Check signing secrets
      id: check_secrets
      run: |
        if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ] && [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && [ -n "${{ secrets.KEY_PASSWORD }}" ] && [ -n "${{ secrets.KEY_ALIAS }}" ]; then
          echo "signing_enabled=true" >> $GITHUB_OUTPUT
        else
          echo "signing_enabled=false" >> $GITHUB_OUTPUT
          echo "Warning: Signing secrets not complete, will skip APK signing"
        fi

    - name: Decode signing keystore
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      run: |
        mkdir -p keystore
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore/keystore.jks

    - name: Sign APK
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      run: |
        APK_NAME="${{ steps.find_apk.outputs.apk_name }}"
        
        sudo apt-get install -y android-sdk-build-tools
        
        zipalign -v 4 "$APK_NAME" "${APK_NAME%.apk}-aligned.apk"
        
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore keystore/keystore.jks \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          "${APK_NAME%.apk}-aligned.apk" "${{ secrets.KEY_ALIAS }}"
        
        jarsigner -verify -verbose "${APK_NAME%.apk}-aligned.apk"
        mv "${APK_NAME%.apk}-aligned.apk" "${APK_NAME%.apk}-signed.apk"

    - name: Upload unsigned APK
      uses: actions/upload-artifact@v4
      with:
        name: mull-unsigned-${{ github.event.inputs.architecture }}
        path: "*.apk"
        retention-days: 30

    - name: Upload signed APK
      if: steps.check_secrets.outputs.signing_enabled == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: mull-signed-${{ github.event.inputs.architecture }}
        path: "*-signed.apk"
        retention-days: 90

    - name: Build summary
      run: |
        echo "## Mull Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Build method: fdroidserver (official method)" >> $GITHUB_STEP_SUMMARY
        echo "- Version code to build: ${{ steps.version_info.outputs.version_to_build }}" >> $GITHUB_STEP_SUMMARY
        echo "- Official version: ${{ steps.version_info.outputs.official_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Architecture: ${{ github.event.inputs.architecture }}" >> $GITHUB_STEP_SUMMARY
        echo "- APK name: ${{ steps.find_apk.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Architecture codes:" >> $GITHUB_STEP_SUMMARY
        echo "- ARMv7: version code ending in 0" >> $GITHUB_STEP_SUMMARY
        echo "- x86: version code ending in 1" >> $GITHUB_STEP_SUMMARY  
        echo "- AArch64: version code ending in 2" >> $GITHUB_STEP_SUMMARY
        ls -la *.apk >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No APK files found" >> $GITHUB_STEP_SUMMARY
